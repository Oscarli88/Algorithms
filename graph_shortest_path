#set a start point, find the shortest path length from the starting point to any other point

from time import clock  
start=clock()

#1.Loading data
f = open('****.txt','r')  
vertices = {}
for line in f.readlines():
    tmp = line.split()
    try:
        vertices[int(tmp[0])] = {int(x.split(',')[0]):int(x.split(',')[1])
        #vertices is a dict with keys as the vertex and values as the other vertex and edge length
for x in tmp[1:]}
    except:
        print('error' + tmp)
f.close()

#2.Creating vars to be used
length = 200
visited = []
non_visited = list(range(2,length+1))
dist = {x : float('inf') for x in range(1,length + 1)}
dist[1] = 0
prev = {x : None for x in range(1, length + 1)}
 
source = 1
while len(visited) < length:      
    visited.append(source)
    tmpdist = float('inf')
    for v in vertices[source].keys():
        if v not in visited:
            if vertices[source][v] + dist[source] < dist[v]:
                dist[v] = vertices[source][v] + dist[source]
                prev[v] = source
    if len(visited) == length:
        break
    for w in non_visited:
        if dist[w] < tmpdist:
            next_exp = w
            tmpdist = dist[w]
#     print(next_exp) # for check
    non_visited.remove(next_exp)
    source = next_exp


print('distance is')  
print(dist)  
print(prev)
print('max distance is: ' + str(max(dist.values())))  
for ind in [7,37,59,82,99,115,133,165,188,197]:  
    print(str(ind) + ' is : ' + str(dist[ind]))  
 
end = clock()
print(end - start)
