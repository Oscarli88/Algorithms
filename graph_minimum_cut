#code up and run the randomized contraction algorithm for the min cut problem and use it on the given graph 
#to compute the min cut. 

import random, copy

data = open("MinCut.txt","r")
G = {}
for line in data:
    lst = [int(s) for s in line.split()]
    G[lst[0]] = lst[1:]   

#this function returns two vertexes of an edge
def choose_random_key(G):
    v1 = random.choice(list(G.keys()))
    v2 = random.choice(list(G[v1]))
    return v1, v2

#this function works this way:
#After choosing v1 and v2, all the points that point to v2 now point to v1, even if there are alreay an v1 because of paralle.

def karger(G):
    length = []
    while len(G) > 2:
        v1, v2 = choose_random_key(G)
        G[v1].extend(G[v2])
        for x in G[v2]:
            G[x].remove(v2)
            G[x].append(v1) 
        while v1 in G[v1]:
            G[v1].remove(v1)
        del G[v2]
    for key in G.keys():
        length.append(len(G[key]))
    return length[0]

def operation(n):
    i = 0
    count = 10000   
    while i < n:
        data = copy.deepcopy(G)
        min_cut = karger(data)
        if min_cut < count:
            count = min_cut
        i = i + 1
    return count
    
print(operation(100))

#since minimum cut has a chance of making mistake, we will run this procedure for many times and choose the smallest number.
